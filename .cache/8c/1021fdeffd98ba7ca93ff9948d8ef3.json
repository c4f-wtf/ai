{"id":"src/scenarios/templates/tictactoe-minmax.js","dependencies":[{"name":"/home/menzi/www/c4f.wtf/ai/package.json","includedInParent":true,"mtime":1574075114495}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TicTacToeMinMax = void 0;\nvar TicTacToeMinMax = {\n  name: 'TicTacToe - Example MinMax',\n  files: [{\n    name: 'index.js',\n    content: \"function recGetScore(state, action){\\n    const newState = scenario.performAction(state, action);\\n    const winner = scenario.getWinner(newState);\\n    if(winner !== scenario.Player.None)\\n        return scenario.getScore(newState);\\n    \\n    let score = 0;\\n    const actions = scenario.getActions(newState);\\n    actions.forEach(action => {\\n        score += 0.2 * recGetScore(newState, action);\\n    });\\n    return score;\\n}\\n\\nfunction getBestAction(state){\\n    const actions = scenario.getActions(state);\\n    let bestScore = -Infinity;\\n    let bestAction = actions[0];\\n    actions.forEach(action => {\\n        const score = recGetScore(state, action);\\n        if(score > bestScore){\\n            bestScore = score;\\n            bestAction = action;\\n        }\\n    });\\n    return {action: bestAction, score: bestScore};\\n}\\n\\nasync function init(state){\\n    console.log('initial state: ', state);\\n}\\n\\nasync function update(state, actions){\\n    const best = getBestAction(state);\\n    console.log(best);\\n    return best.action;\\n}\\n\\nasync function finish(state, score){\\n    console.log('final state: ', state);\\n    console.log('score: ', score);\\n}\"\n  }]\n};\nexports.TicTacToeMinMax = TicTacToeMinMax;\nvar _default = TicTacToeMinMax;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":7}},{"name":"TicTacToeMinMax","generated":{"line":7,"column":4},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":13}},{"generated":{"line":7,"column":19},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":28}},{"generated":{"line":7,"column":22},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":31}},{"name":"name","generated":{"line":8,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":2,"column":4}},{"name":"name","generated":{"line":8,"column":2},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":2,"column":4}},{"generated":{"line":8,"column":6},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":2,"column":8}},{"generated":{"line":8,"column":8},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":2,"column":10}},{"generated":{"line":8,"column":36},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":31}},{"name":"files","generated":{"line":9,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":3,"column":4}},{"name":"files","generated":{"line":9,"column":2},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":3,"column":4}},{"generated":{"line":9,"column":7},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":3,"column":9}},{"generated":{"line":9,"column":9},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":3,"column":11}},{"generated":{"line":9,"column":10},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":4,"column":8}},{"name":"name","generated":{"line":10,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":5,"column":12}},{"name":"name","generated":{"line":10,"column":4},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":5,"column":12}},{"generated":{"line":10,"column":8},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":5,"column":16}},{"generated":{"line":10,"column":10},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":5,"column":18}},{"generated":{"line":10,"column":20},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":4,"column":8}},{"name":"content","generated":{"line":11,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":6,"column":12}},{"name":"content","generated":{"line":11,"column":4},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":6,"column":12}},{"generated":{"line":11,"column":11},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":6,"column":19}},{"generated":{"line":12,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":4,"column":8}},{"generated":{"line":12,"column":3},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":3,"column":11}},{"generated":{"line":13,"column":0},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":31}},{"generated":{"line":13,"column":1},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":1,"column":7}},{"name":"TicTacToeMinMax","generated":{"line":15,"column":15},"source":"src/scenarios/templates/tictactoe-minmax.js","original":{"line":53,"column":15}}],"sources":{"src/scenarios/templates/tictactoe-minmax.js":"export const TicTacToeMinMax = {\n    name: 'TicTacToe - Example MinMax',\n    files: [\n        {\n            name: 'index.js',\n            content: \n`function recGetScore(state, action){\n    const newState = scenario.performAction(state, action);\n    const winner = scenario.getWinner(newState);\n    if(winner !== scenario.Player.None)\n        return scenario.getScore(newState);\n    \n    let score = 0;\n    const actions = scenario.getActions(newState);\n    actions.forEach(action => {\n        score += 0.2 * recGetScore(newState, action);\n    });\n    return score;\n}\n\nfunction getBestAction(state){\n    const actions = scenario.getActions(state);\n    let bestScore = -Infinity;\n    let bestAction = actions[0];\n    actions.forEach(action => {\n        const score = recGetScore(state, action);\n        if(score > bestScore){\n            bestScore = score;\n            bestAction = action;\n        }\n    });\n    return {action: bestAction, score: bestScore};\n}\n\nasync function init(state){\n    console.log('initial state: ', state);\n}\n\nasync function update(state, actions){\n    const best = getBestAction(state);\n    console.log(best);\n    return best.action;\n}\n\nasync function finish(state, score){\n    console.log('final state: ', state);\n    console.log('score: ', score);\n}`,\n        }\n    ]\n}\n\nexport default TicTacToeMinMax;"},"lineCount":null}},"error":null,"hash":"9602af2dc87aa64aa4d02b8afb67f51f","cacheData":{"env":{}}}